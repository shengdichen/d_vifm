" user-defined commands {{{

" default extra commands {{{
" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff nvim -d %f %F
command! zip zip -r %f.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! mkd :mkdir "%a"
command! tch :touch "%a"
command! vgrep vim "+grep %a"
command! reload :write | restart

" get the size {{{
command! sz
    \ !!du -d0 -h -c %f
command! szn
    \ !nvim <(du -d0 -h -c %f)
" }}}

command! hardlink
    \ !!cp -al %f %a

command! list
    \ !nvim <(ls -a -C1 %a | tail -n +3)

command! compareFlat
    \ !nvim -d
    \ <(ls -a -C1 %f:h | tail -n +3 | sort)
    \ <(ls -a -C1 %F:h | tail -n +3 | sort)
command! compareRecur
    \ !nvim -d
    \ <(find %f:h -type f | sort)
    \ <(cd %F:h && find . -type f | sort)

command! exx
    \ !nohup ./%f 1>/dev/null 2>&1 &
command! ex
    \ !!./%f
" }}}

command! tidal
    \ for i in {1..2}; do tidal-dl -l "%a"; done

command viewspec
    \ !sox %c -n spectrogram -o %c.png 1>/dev/null 2>&1
    \ &&
    \ imv %c.png &

command! x
    \ !nohup %a 1>/dev/null 2>&1 &

" run command in new tmux-window, formatted with the command name |z| as
" parallelism to |x| in the sense that both create a new, separate viewport
" NOTE: use |execute| to include further instructions after |command|, as the
" bar character ("|") will be automatically consumed by |command| itself as its
" argument, as documented in vifm-:bar
"       command! z :execute "screen!" | :execute "%a" | :execute "screen"
"
" The |screen| command of vifm always creates the new window at the end of the
" current session, which is counter-productive for many-window navigation
" the -a flag of tmux's native |new-window| command remedies this inconvenience
command! z :execute "!tmux new-window -a %a"



" edit with neoVim by calling |:nv| in N_Mode, i.e., |nv| in C_Mode, with
" additional arguments passed as flags to neoVim
command! nv :!nvim %a %c


" util-funcs for tmux-integration {{{
" create new pane to plain shell {{{
" NOTE:
"   shell's working-directory set to that of the invoking vifm-window

command! tmuxSplitWindowHorz
    \ :execute "!tmux split-window -h -t :."

command! tmuxSplitWindowVert
    \ :execute "!tmux split-window -v -t :."
" }}}


" create new pane to nvim {{{
" NOTE:
"   %f := all selected files [vifm's macro]
"   -O := open in splits [vim's command-line calling syntax]

command! tmuxSplitWindowHorzEdit
    \ :execute "!tmux split-window -h -t :. nvim -O '%f'"

command! tmuxSplitWindowVertEdit
    \ :execute "!tmux split-window -v -t :. nvim -O '%f'"
" }}}


" create new pane to duplicate current session {{{
" NOTE:
"   use vifm's internal session-mechanism to save session for duplication

command! tmuxSplitWindowHorzDupl
    \ :write |
    \ :execute "!tmux split-window -h -t :. vifm"

command! tmuxSplitWindowVertDupl
    \ :write |
    \ :execute "!tmux split-window -v -t :. vifm"
" }}}

command! tmuxSetLayout
    \ :execute "!tmux select-layout main-vertical"

" }}}
" perform the similar editing with neoVim, now in a new tmux-window, named as
" nvn := |nv|(previous command) + n(new_window)
"       command! nvz :execute "screen!" | :execute "!nvim %a %c" | :execute "screen"
" edit in a new (vertical) split of tmux
command! nvz :execute "!tmux split-window nvim %a %c"



" a more complex example command with integrated testing for directories, for
" demonstration purposes only
"   command! nvtz
"       \ :if filetype('.') == "dir" |
"       \ execute "cd %c" |
"       \ else | execute "screen!" | execute "!nvim %a %c" | execute "screen" |
"       \ endif



" if no arugment passed, toggle between setting to |git log| and resetting
" if argument passed and is "d", preview with |git diff|
" otherwise set to the argument
command! prev
    \ :if expand('%a') == "" && &previewprg== "" |
        \ execute
        \ "set previewprg='
            \git log -p --all --graph --oneline -U1 --color -- %c 2>&1
        \'"
        \ |
    \ elseif expand('%a') == "" && &previewprg != "" |
        \ execute "set previewprg=''" |
    \ elseif expand('%a') == "d" |
        \ execute "set previewprg='git diff -U1 --color -- %c 2>&1'" |
    \ else |
        \ execute "set previewprg='%a'" |
    \ endif


" }}}



" keybindings {{{
nnoremap J 4j
nnoremap K 4k

vnoremap J 4j
vnoremap K 4k

nnoremap L
    \ :tmuxSplitWindowVertEdit
    \ <cr>


nnoremap <cr>
    \ :tmuxSplitWindowVertEdit
    \ |
    \ :tmuxSetLayout
    \ <cr>


nnoremap H
    \ :tmuxSplitWindowVertDupl
    \ <cr>


" new shell in vertical split
nnoremap S
    \ :tmuxSplitWindowVert


" start shell in-place, as opposed to starting a new shell instance above
nnoremap s :shell!<cr>



" toggle visibility of preview window in a separate pane
" NOTE: to preview in fullscreen, press "e" in N_Mode
nnoremap w
    \ :if &quickview == 0 |
    \ execute "split" | execute "view!" |
    \ else | execute "view" | execute "only" |
    \ endif
    \ <cr>


" a similar shortcut to toggle previewing with |git log|
nnoremap W :prev<space>


" tabbing {{{
nnoremap <c-t> :tabnew || tabname<space>
nnoremap <c-y> :tabname<space>

nnoremap <c-n> gt
nnoremap <c-p> gT

" }}}

" default, but discontinued bindings {{{
" [discontinued default binding] toggle VIEW_Mode in V_Mode and restore the
" visual selection afterwards
vnoremap w :view<cr>gv

" Open file in existing instance of gvim
"   nnoremap o :!gvim --remote-tab-silent %f<cr>
" Open file in new instance of gvim
"   nnoremap O :!gvim %f<cr>

" Open file in the background using its default program
nnoremap gb :file &<cr>l

" Interaction with system clipboard
"   if has('win')
"       " Yank current directory path to Windows clipboard with forward slashes
"       nnoremap yp :!echo %"d:gs!\!/! %i | clip<cr>
"       " Yank path to current file to Windows clipboard with forward slashes
"       nnoremap yf :!echo %"c:gs!\!/! %i | clip<cr>
"   elseif executable('xclip')
"       " Yank current directory path into the clipboard
"       nnoremap yd :!echo %d | xclip %i<cr>
"       " Yank current file path into the clipboard
"       nnoremap yf :!echo %c:p | xclip %i<cr>
"   elseif executable('xsel')
"       " Yank current directory path into primary and selection clipboards
"       nnoremap yd :!echo -n %d | xsel --input --primary %i &&
"                   \ echo -n %d | xsel --clipboard --input %i<cr>
"       " Yank current file path into into primary and selection clipboards
"       nnoremap yf :!echo -n %c:p | xsel --input --primary %i &&
"                   \ echo -n %c:p | xsel --clipboard --input %i<cr>
"   endif


" Mappings for faster renaming
"   nnoremap I cw<c-a>
"   nnoremap cc cw<c-u>
"   nnoremap A cw

" Open console in current directory
"   nnoremap ,t :!xterm &<cr>

" Open editor to edit vifmrc and apply settings after returning to vifm
"   nnoremap ,c :write | edit $MYVIFMRC | restart<cr>
" Open gvim to edit vifmrc
"   nnoremap ,C :!gvim --remote-tab-silent $MYVIFMRC &<cr>

" Toggle wrap setting on ,w key
"   nnoremap ,w :set wrap!<cr>

" Example of standard two-panel file managers mappings
"   nnoremap <f3> :!less %f<cr>
"   nnoremap <f4> :edit<cr>
"   nnoremap <f5> :copy<cr>
"   nnoremap <f6> :move<cr>
"   nnoremap <f7> :mkdir<space>
"   nnoremap <f8> :delete<cr>


" }}}

" }}}

