" handler {{{
" default introduction by vifm {{{
" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros %f, %F, %d, %F may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.
" }}}

" introduction {{{
" distinguish between two types of file handler:
"   1.  opening handler
"   2.  previewing handler

" opening handler {{{
" filetype <file_t>[,<file_t>]*
"   \ {description of first handler}
"   \ <command_of_handler>,
"   \
"   \ {description of second handler}
"   \ <command_of_handler>,
" }}}

" choosing opening handler {{{
" to view a dialogue showing all currently set handlers for the current
" filetype of the current file, with the extra [ &] at the end indicating
" a fork, which is probably always a good idea for GUI-applications
"       |:file[ &]|
" to avoid the popped-up dialogue and select a handler directly with
" command-line completion, tab-complete after |:file|, select the handler and "
" then optionally include the [ &] at the end to run as a fork
"       |:file {tab_complete}<chosen_handler>[ &]|
" if the handler is known already, can avoid tab-completion and provide the
" beginning few characters that can uniquely identify the handler
"       |:file <first_few_chars>[ &]|
" }}}

" previewing-handler {{{
" |fileviewer| specifies previewing behavior, i.e., the output when |e| has
" been toggled or |:view| has been activated, with the same syntax as
" |file[x]type|

" the |fileviewer| option can be locally overriden, i.e., effective only for
" the current pane, by locally setting |previewprg|, e.g.:
"       set previewprg="git log -p %c 2>&1"
" note that calling |set| here is equivalent to |setlocal|
" }}}

" see help-pages: |vifm-patterns| and the following |vifm-glob| for specifying
" filetypes in patterns, e.g., with RegEx

" to specify files, see |vifm-macros|
"   %c      file under cursor position in the active pane
"   %C      file under cursor position in the inactive pane
"   %f      all selected file[s] in the active pane
"   %F      all selected file[s] in the inactive pane
"   %d      fullpath to current directory in the active pane
"   %D      fullpath to current directory in the inactive pane

" detour: vifm-globbing {{{
" for any specific |.ext| extension, observe following matching behaviors:
"     match...      with...
"     .ext          .ext
"
"     ..ext         ?.ext
"     a.ext         ?.ext
"
"     [^\.].ext     *.ext
"
"      ..ext        ?*.ext
"      a.ext        ?*.ext
"     ...ext        ?*.ext
"     .a.ext        ?*.ext
"     a..ext        ?*.ext
"     aa.ext        ?*.ext
" thus, for every file extension |ext|, use:
"       .ext and ?*.ext
" to truly include everything ending with ".ext", INCLUDING ".ext" itself,
" which can be circumvented with:
"       *.ext
" }}}

" Syntax highlighting in previewing handlers {{{
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
"
" fileviewer *[^/] pygmentize -O style=monokai -f console256 -g
" }}}
" }}}
" }}}

" sample filter C[++] & python
"   filter! /^.*\.(lo|o|d|class|py[co])$|.*~$/

" if !has('win')
"     set slowfs=curlftpfs
" endif

" vim: filetype=vifm foldmethod=marker
