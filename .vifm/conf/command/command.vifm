" intro {{{
" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window
" }}}

" file-system {{{
command! mkcd
    \ :mkdir %a | cd %a
command! mkd
    \ :mkdir "%a"
command! tch
    \ :touch "%a"

command! getSize
    \ !!du -d0 -h -c %f
command! getSizeNvim
    \ !nvim <(du -d0 -h -c %f)

command! hardlink
    \ !!cp -al %f %a

command! list
    \ !nvim <(ls -a -C1 %a | tail -n +3)

command! diff
    \ nvim -d %f %F

command! compareFlat
    \ !nvim -d
    \ <(ls -a -C1 %f:h | tail -n +3 | sort)
    \ <(ls -a -C1 %F:h | tail -n +3 | sort)
command! compareRecur
    \ !nvim -d
    \ <(find %f:h -type f | sort)
    \ <(cd %F:h && find . -type f | sort)

command! df
    \ df -h %m 2> /dev/null
" }}}

" execute {{{
command! x
    \ !nohup %a 1>/dev/null 2>&1 &

command! run
    \ !! ./%f
command! exx
    \ !nohup ./%f 1>/dev/null 2>&1 &
command! ex
    \ !!./%f
" }}}

command! tidal
    \ for i in {1..2}; do tidal-dl -l "%a"; done

command viewspec
    \ !sox %c -n spectrogram -o %c.png 1>/dev/null 2>&1
    \ &&
    \ imv %c.png &

" tmux  {{{
" new pane {{{
" shell {{{
" NOTE:
"   shell's working-directory set to that of the invoking vifm-window

command! tmuxSplitWindowHorz
    \ :execute "!tmux split-window -h -t :."

command! tmuxSplitWindowVert
    \ :execute "!tmux split-window -v -t :."
" }}}

" edit in nvim {{{
" NOTE:
"   %f := all selected files [vifm's macro]
"   -O := open in splits [vim's command-line calling syntax]

command! tmuxSplitWindowHorzEdit
    \ :execute "!tmux split-window -h -t :. nvim -O '%f'"

command! tmuxSplitWindowVertEdit
    \ :execute "!tmux split-window -v -t :. nvim -O '%f'"
" }}}

" duplicate current vifm-session {{{
command! tmuxSplitWindowHorzDupl
    \ :write |
    \ :execute "!tmux split-window -h -t :. vifm"

command! tmuxSplitWindowVertDupl
    \ :write |
    \ :execute "!tmux split-window -v -t :. vifm"
" }}}
" }}}

" misc {{{
command! tmuxSetLayout
    \ :execute "!tmux select-layout main-vertical"

command! tmuxPanePrevious
    \ :execute "!tmux select-pane -t :.-1"
command! tmuxPaneNext
    \ :execute "!tmux select-pane -t :.+1"

command! tmuxPaneLast
    \ :execute "!tmux select-pane -t :.{last}"
" }}}
" }}}

" vifm {{{
command! reload
    \ :write | restart

" a more complex example command with integrated testing for directories, for
" demonstration purposes only
"   command! nvtz
"       \ :if filetype('.') == "dir" |
"       \ execute "cd %c" |
"       \ else | execute "screen!" | execute "!nvim %a %c" | execute "screen" |
"       \ endif

" if no arugment passed, toggle between setting to |git log| and resetting
" if argument passed and is "d", preview with |git diff|
" otherwise set to the argument
command! prev
    \ :if expand('%a') == "" && &previewprg== "" |
        \ execute
        \ "set previewprg='
            \git log -p --all --graph --oneline -U1 --color -- %c 2>&1
        \'"
        \ |
    \ elseif expand('%a') == "" && &previewprg != "" |
        \ execute "set previewprg=''" |
    \ elseif expand('%a') == "d" |
        \ execute "set previewprg='git diff -U1 --color -- %c 2>&1'" |
    \ else |
        \ execute "set previewprg='%a'" |
    \ endif
" }}}

" misc {{{
" archive {{{
command! archiveTar
    \ tar -cv -f _new.tar -- %f
command! archiveTarBzip2
    \ tar --bzip2 -cv -f _new.tar.bz2 -- %f
command! archiveTarGzip
    \ tar --gzip -cv -f _new.tar.gz -- %f
command! archiveTarXz
    \ tar --xz -cv -f _new.tar.xz -- %f

command! archiveSevenz
    \ 7z a _new.7z -- %f
command! archiveZip
    \ zip -r _new.zip -- %f
" }}}

command! make
    \ !!make %a

command! vgrep
    \ vim "+grep %a"
" }}}

" vim: filetype=vifm foldmethod=marker
